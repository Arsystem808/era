# app.py
import os, streamlit as st
from polygon_data import fetch_daily_ohlc, PolygonError
from core_strategy import decide
from narrator import narrate
from backtest import run_backtest

st.set_page_config(page_title="CapIntel‚ÄëQ ‚Ä¢ Polygon", page_icon="üß≠", layout="wide")

st.title("CapIntel‚ÄëQ ‚Äî Polygon Edition")

ticker = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, QQQ, AAPL, X:BTCUSD):", value="QQQ").strip().upper()
horizon = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç:", ["–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)", "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)", "–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)"])

col1, col2 = st.columns([1,1])
with col1:
    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        try:
            df = fetch_daily_ohlc(ticker, 1800)
            price = float(df["close"].iloc[-1])
            idea = decide(df, horizon)
            st.subheader("üß† –†–µ–∑—É–ª—å—Ç–∞—Ç")
            st.write(narrate(ticker, horizon, price, idea))
        except PolygonError as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
            st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

with col2:
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç"):
        try:
            bt = run_backtest(ticker, horizon, years=5)
            if bt.empty:
                st.warning("–ë—ç–∫—Ç–µ—Å—Ç –Ω–µ –Ω–∞—à—ë–ª —Å–¥–µ–ª–æ–∫ –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            else:
                st.dataframe(bt)
                win = (bt["ret_pct"]>0).mean()*100
                st.success(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(bt)}, –¥–æ–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {win:.1f}%")
        except PolygonError as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
            st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

st.divider()
with st.expander("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"):
    st.write(f"POLYGON_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if os.environ.get('POLYGON_API_KEY') else '–ù–µ—Ç'}")
    st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∞—Å—á—ë—Ç—ã –∏ –≥–æ–≤–æ—Ä–∏—Ç ¬´–ø–æ‚Äë—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª.")
